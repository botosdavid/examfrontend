datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id              String             @id @default(cuid())
    name            String
    image           String?
    neptun          String             @unique
    password        String
    role            Role               @default(STUDENT)
    examsCreated    Exam[]             @relation("author")
    examsSubscribed ExamsOnUsers[]
    selectedAnswers QuestionsOnUsers[]
}

model Answer {
    id         String   @id @default(cuid())
    text       String
    Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String

    @@index([questionId])
}

model Question {
    id              String             @id @default(cuid())
    text            String
    answers         Answer[]
    exam            Exam               @relation(fields: [examId], references: [id])
    examId          String
    correctAnswer   Int
    selectedAnswers QuestionsOnUsers[]
    group           Group              @default(A)

    @@index([examId])
}

model Exam {
    id          String         @id @default(cuid())
    name        String         @unique
    author      User           @relation("author", fields: [authorId], references: [id])
    authorId    String
    questions   Question[]
    date        DateTime
    code        String         @unique
    subscribers ExamsOnUsers[]
    createdAt   DateTime       @default(now())

    @@index([authorId])
}

model QuestionsOnUsers {
    user           User     @relation(fields: [userId], references: [id])
    userId         String
    question       Question @relation(fields: [questionId], references: [id])
    questionId     String
    selectedAnswer Int
    createdAt      DateTime @default(now())

    @@id([userId, questionId])
    @@index([userId])
    @@index([questionId])
}

model ExamsOnUsers {
    user            User     @relation(fields: [userId], references: [id])
    userId          String
    exam            Exam     @relation(fields: [examId], references: [id])
    examId          String
    hasHalving      Boolean  @default(true)
    hasStatistics   Boolean  @default(true)
    hasBestAnswer   Boolean  @default(true)
    hasFinished     Boolean  @default(false)
    currentQuestion Int      @default(0)
    questionsOrder  String?
    group           Group    @default(A)
    createdAt       DateTime @default(now())

    @@id([userId, examId])
    @@index([userId])
    @@index([examId])
}

enum Role {
    STUDENT
    TEACHER
    ADMIN
}

enum Group {
    A
    B
}
